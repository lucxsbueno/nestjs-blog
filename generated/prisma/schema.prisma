// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  name           String
  email          String          @unique
  password       String
  writtenPosts   Post[]          @relation("WrittenPosts")
  favoritePosts  Post[]          @relation("FavoritePosts")
  userPreference UserPreference?
  role           Role            @default(GUEST)
  isAdmin        Boolean
  postLikes      PostLike[]
  comments       Comment[]

  @@index([email])
}

model UserPreference {
  id           String  @id @default(uuid())
  emailUpdates Boolean
  user         User    @relation(fields: [userId], references: [id])
  userId       String  @unique
}

model Post {
  id            String     @id @default(uuid())
  title         String
  description   String?
  content       String
  thumbUrl      String?
  url           String?
  published     Boolean    @default(false)
  averageRating Float
  createdAt     DateTime   @default(now())
  upadatedAt    DateTime   @updatedAt
  author        User       @relation("WrittenPosts", fields: [authorId], references: [id])
  authorId      String
  favoritedBy   User?      @relation("FavoritePosts", fields: [favouriteId], references: [id])
  favouriteId   String?
  categories    Category[]
  tags          Tag[]
  comments      Comment[]
  postLikes     PostLike[]
  // @@id([title,authorId]) here id can be generated with both title and authorId combination
}

model Category {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[]
}

model Tag {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[]
}

model Comment {
  id        String   @id @default(uuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  anonymous Boolean  @default(false)
  content   String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
}

model PostLike {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

enum Role {
  GUEST
  ADMIN
  EDITOR
}

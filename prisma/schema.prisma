// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  name           String
  email          String          @unique
  password       String
  bio            String?
  profileImage   String?
  location       String?
  websiteUrl     String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  writtenPosts   Post[]          @relation("WrittenPosts")
  userPreference UserPreference?
  role           Role            @default(GUEST)
  isAdmin        Boolean
  @@index([email])
}

model UserPreference {
  id           String  @id @default(uuid())
  emailUpdates Boolean
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  user         User    @relation(fields: [userId], references: [id])
  userId       String  @unique
}

model Post {
  id            String     @id @default(uuid())
  title         String
  slug          String     @unique
  description   String?  
  content       String
  thumbUrl      String?
  url           String?
  published     Boolean    @default(false)
  averageRating Float?
  createdAt     DateTime   @default(now())
  upadatedAt    DateTime   @updatedAt
  author        User       @relation("WrittenPosts", fields: [authorId], references: [id])
  authorId      String
  likes         Int?
  tags          Tag[]
  comments      Comment[]
}

model Tag {
  id    String @id @default(uuid())
  name  String @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  posts Post[]
}

model Comment {
  id        String @id @default(uuid())
  name      String?
  email     String?
  anonymous Boolean @default(false) 
  comment   String
  post      Post   @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  GUEST
  ADMIN
  EDITOR
}